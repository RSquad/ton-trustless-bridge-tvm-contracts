#include "imports/stdlib.fc";
#include "utils/messages.fc";
#include "static/logs.fc";

tuple init_hash () asm "NIL";
tuple update(tuple t, slice s) asm "TPUSH";
int digest_keccak(tuple t) asm " DUP TLEN EXPLODEVAR HASHEXT_KECCAK256";
int HASHEXT_KECCAK(slice, slice) asm " 2 PUSHINT HASHEXT_KECCAK256";

const op::calc_hash = "op::calc_hash"c; ;; create an opcode from string using the "c" prefix, this results in 0x46cf6aeb opcode in this case
const op::verify_proof = "op::verify_proof"c; ;; create an opcode from string using the "c" prefix, this results in 5e742370 opcode in this case

const data:node_leaf = "data:node_leaf"c; ;; b95a0273
const data:node_branch = "data:node_branch"c; ;; 40a54ae8
const data:node_empty = "data:empty_branch"c; ;; e28eb9cc
;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;

(int) rlp_bloom_size(cell bloom, int len) impure {
    slice cs = bloom.begin_parse();
    if (cs.slice_refs_empty?()) {
        return len + cs.slice_bits();
    }

    return rlp_bloom_size(cs~load_ref(), len + cs.slice_bits());
}

(tuple) rlp_bloom(cell bloom, tuple hash) impure {
    slice cs = bloom.begin_parse();
    if (cs.slice_refs_empty?()) {
        return hash.update(cs);
    }

    return rlp_bloom(cs~load_ref(), hash.update(cs));
}

(int) number_length(int number) impure {
    int l = 0;
    while(number) {
        l += 1;
        number >>= 8;
    }
    return l;
}


(int) encode_length(int len, int offset) impure {
    if (len < 56) {
        return len + offset;
    }
    else {
        int l_length = ((number_length(len)));
        return ((offset + 55 + l_length) << (l_length * 8)) + len;
    }
}

(int) rlp_topics_size(cell topics, int len) {
    slice cs = topics.begin_parse();
    int topic_size = cs.slice_bits() / 8;
    int topic_size_encoded = encode_length(topic_size, 128);

    slice topic_size_slice = begin_cell()
        .store_uint(topic_size_encoded, number_length(topic_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    ;; cell log_body = begin_cell()
    ;;     .store_ref(begin_cell().store_slice(topic_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_uint(len + topic_size + (topic_size_slice.slice_bits() / 8), 256).end_cell())
    ;;     .end_cell();

    ;; emit_log_simple(log::wrap, log_body, 0);

    if (cs.slice_refs_empty?()) {
        return len + topic_size + (topic_size_slice.slice_bits() / 8);
    }

    return rlp_topics_size(cs~load_ref(), len + topic_size + (topic_size_slice.slice_bits() / 8));
}

(tuple) rlp_topics_to_hex(cell topics, tuple hash) {
    slice cs = topics.begin_parse();
    int topic_size = cs.slice_bits() / 8;
    int topic_size_encoded = encode_length(topic_size, 128);

    slice topic_size_slice = begin_cell()
        .store_uint(topic_size_encoded, number_length(topic_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    ;; cell log_body = begin_cell()
    ;;     .store_ref(begin_cell().store_slice(topic_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_uint(len + topic_size + (topic_size_slice.slice_bits() / 8), 256).end_cell())
    ;;     .end_cell();

    ;; emit_log_simple(log::wrap, log_body, 0);

    if (cs.slice_refs_empty?()) {
        return hash.update(topic_size_slice).update(cs);
    }

    return rlp_topics_to_hex(cs~load_ref(), hash.update(topic_size_slice).update(cs));
}

(tuple) rlp_logs_to_hex(cell logs, tuple hex) impure {
    slice cs = logs.begin_parse();
    int addr_size = cs.slice_bits() / 8;
    int addr_size_encoded = encode_length(addr_size, 128);

    slice addr_size_slice = begin_cell()
        .store_uint(addr_size_encoded, 8)
        .end_cell()
        .begin_parse();

    cell topics_cell = cs~load_ref();
    int topics_size = rlp_topics_size(topics_cell, 0);
    int topics_size_encoded = encode_length(topics_size, 192);

    slice topics_size_slice = begin_cell()
        .store_uint(topics_size_encoded, number_length(topics_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    cell data_cell = cs~load_ref();
    int data_size = rlp_bloom_size(data_cell, 0) / 8;
    int data_size_encoded = encode_length(data_size, 128);

    slice data_size_slice = begin_cell()
        .store_uint(data_size_encoded, number_length(data_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    int log_size = addr_size
        + (addr_size_slice.slice_bits() / 8)
        + topics_size
        + (topics_size_slice.slice_bits() / 8)
        + data_size
        + (data_size_slice.slice_bits() / 8);

    int log_size_encoded = encode_length(log_size, 192);
    slice log_size_slice = begin_cell()
        .store_uint(log_size_encoded, number_length(log_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    ;; cell log_body = begin_cell()
    ;;     .store_ref(begin_cell().store_slice(addr_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(topics_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(data_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(log_size_slice).end_cell())
    ;;     .end_cell();

    ;; emit_log_simple(log::wrap, log_body, 0);

    hex = hex.update(log_size_slice).update(addr_size_slice).update(cs).update(topics_size_slice);
    hex = rlp_topics_to_hex(topics_cell, hex);
    hex = hex.update(data_size_slice);
    hex = rlp_bloom(data_cell, hex);

    if (cs.slice_refs_empty?()) {
        return hex;
    }

    return rlp_logs_to_hex(cs~load_ref(), hex);
}

(int) rlp_logs_size(cell logs, int len) impure {
    slice cs = logs.begin_parse();
    int addr_size = cs.slice_bits() / 8;
    int addr_size_encoded = encode_length(addr_size, 128);

    slice addr_size_slice = begin_cell()
        .store_uint(addr_size_encoded, 8)
        .end_cell()
        .begin_parse();

    cell topics_cell = cs~load_ref();
    int topics_size = rlp_topics_size(topics_cell, 0);
    int topics_size_encoded = encode_length(topics_size, 192);

    slice topics_size_slice = begin_cell()
        .store_uint(topics_size_encoded, number_length(topics_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    cell data_cell = cs~load_ref();
    int data_size = rlp_bloom_size(data_cell, 0) / 8;
    int data_size_encoded = encode_length(data_size, 128);

    slice data_size_slice = begin_cell()
        .store_uint(data_size_encoded, number_length(data_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    int log_size = addr_size
        + (addr_size_slice.slice_bits() / 8)
        + topics_size
        + (topics_size_slice.slice_bits() / 8)
        + data_size
        + (data_size_slice.slice_bits() / 8);

    int log_size_encoded = encode_length(log_size, 192);
    slice log_size_slice = begin_cell()
        .store_uint(log_size_encoded, number_length(log_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    int next_size = len + log_size + (log_size_slice.slice_bits()) / 8;

    ;; cell log_body = begin_cell()
    ;;     .store_ref(begin_cell().store_slice(addr_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(topics_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(data_size_slice).end_cell())
    ;;     .store_ref(begin_cell().store_slice(log_size_slice).end_cell())
    ;;     .end_cell();

    ;; emit_log_simple(log::wrap, log_body, 0);

    if (cs.slice_refs_empty?()) {
        return next_size;
    }

    return rlp_logs_size(cs~load_ref(), next_size);
}

(tuple) rlp_receipt(slice receipt_slice) impure {
    tuple hash = init_hash();
    int total_size = 0;

    int cumulative_gas_used_size = receipt_slice.slice_bits() / 8 - 2;
    slice type_slice = begin_cell()
        .store_uint(receipt_slice~load_uint(8), 8)
    .end_cell().begin_parse();
    slice status_slice = begin_cell()
        .store_uint(receipt_slice~load_uint(8), 8)
        .end_cell()
        .begin_parse();

    slice cumulative_gas_used_size_slice = begin_cell()
        .store_uint(encode_length(cumulative_gas_used_size, 128), number_length(cumulative_gas_used_size) * 8)
        .end_cell()
        .begin_parse();

    slice cumulative_gas_used_slice = begin_cell()
        .store_uint(receipt_slice~load_uint(cumulative_gas_used_size * 8), cumulative_gas_used_size * 8)
        .end_cell()
        .begin_parse();

    cell logs_bloom = receipt_slice~load_ref();
    int logs_bloom_size = rlp_bloom_size(logs_bloom, 0) / 8;
    int logs_bloom_size_encoded = encode_length(logs_bloom_size, 128);

    slice logs_bloom_size_slice = begin_cell()
        .store_uint(logs_bloom_size_encoded, number_length(logs_bloom_size_encoded) * 8)
        .end_cell()
        .begin_parse();


    cell logs_cell = receipt_slice~load_ref();
    int logs_size = rlp_logs_size(logs_cell, 0);
    int logs_size_encoded = encode_length(logs_size, 192);

    slice logs_size_slice = begin_cell()
        .store_uint(logs_size_encoded, number_length(logs_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    total_size += (status_slice.slice_bits() + cumulative_gas_used_size_slice.slice_bits() + cumulative_gas_used_slice.slice_bits()) / 8;
    total_size += logs_bloom_size + (logs_bloom_size_slice.slice_bits() / 8);
    total_size += logs_size + (logs_size_slice.slice_bits() / 8);
    int total_size_encoded = encode_length(total_size, 192);
    slice total_size_encoded_slice = begin_cell()
        .store_uint(total_size_encoded, number_length(total_size_encoded) * 8)
        .end_cell()
        .begin_parse();


    hash = hash.update(type_slice);

    hash = hash.update(
        total_size_encoded_slice
    );

    hash = hash.update(
        status_slice
    );
    hash = hash.update(
        cumulative_gas_used_size_slice
    );
    hash = hash.update(
        cumulative_gas_used_slice
    );

    hash = hash.update(
        logs_bloom_size_slice
    );

    hash = rlp_bloom(logs_bloom, hash);
    hash = hash.update(
        logs_size_slice
    );
    hash = rlp_logs_to_hex(logs_cell, hash);

    return hash;
}

(int) keccak_proof_size(cell proof_part, int total_size) impure {
    slice cs = proof_part.begin_parse();
    int data_size = cs.slice_bits() / 8;
    if ((data_size == 1) ? (cs.preload_uint(8) < 128) : 0) {
        total_size += (proof_part.begin_parse()).slice_bits() / 8;
    } else {
        int encoded_size = encode_length(data_size, 128);
        slice size = begin_cell()
            .store_uint(encoded_size, number_length(encoded_size) * 8)
            .end_cell()
            .begin_parse();

        total_size += (size.slice_bits() / 8) + data_size;
    }

    if (cs.slice_refs_empty?()) {
        return total_size;
    }

    return keccak_proof_size(cs~load_ref(), total_size);
}

(tuple) keccak_proof(cell proof_part, tuple hex) impure {
    slice cs = proof_part.begin_parse();
    int data_size = cs.slice_bits() / 8;
    if ((data_size == 1) ? (cs.preload_uint(8) < 128) : 0) {
        hex = hex.update(proof_part.begin_parse());
    } else {
        int encoded_size = encode_length(data_size, 128);
        slice size = begin_cell()
            .store_uint(encoded_size, number_length(encoded_size) * 8)
            .end_cell()
            .begin_parse();

        hex = hex
        .update(size)
        .update(proof_part.begin_parse());
    }

    if (cs.slice_refs_empty?()) {
        return hex;
    }

    return keccak_proof(cs~load_ref(), hex);
}

(tuple) tuple_push_refs(cell data, tuple hex) impure {
    slice cs = data.begin_parse();
    hex = hex.update(cs);
    if (cs.slice_refs_empty?()) {
        return hex;
    }

    return tuple_push_refs(cs~load_ref(), hex);
}

(int) leaf_data_proof_size(cell proof_part, int total_size) impure {
    slice cs = proof_part.begin_parse();
    int data_size = cs.slice_bits() / 8;
    total_size += data_size;

    if (cs.slice_refs_empty?()) {
        return total_size;
    }

    return leaf_data_proof_size(cs~load_ref(), total_size);
}

(int) compare_leaf_hash(cell proof, int wanted_hash) impure {



    slice proof_slice = proof.begin_parse();
    ;; data = 20
    cell data_cell = proof_slice~load_ref();
    int data_size = leaf_data_proof_size(data_cell, 0);
    int data_size_encoded = encode_length(data_size, 128);
    slice data_size_encoded_slice = begin_cell()
        .store_uint(data_size_encoded, number_length(data_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    int size_of_data_key = proof_slice.slice_bits();
    int data_key = proof_slice~load_uint(size_of_data_key);
    cell data_key = begin_cell().store_uint(data_key, size_of_data_key).end_cell();

    int proof_size = data_size + number_length(data_size_encoded) + size_of_data_key / 8; ;;keccak_proof_size(proof, 0);
    int proof_size_encoded = encode_length(proof_size, 192);
    slice proof_size_encoded_slice = begin_cell()
        .store_uint(proof_size_encoded, number_length(proof_size_encoded) * 8)
        .end_cell()
        .begin_parse();

    tuple hash = init_hash();
    hash = hash.update(
        proof_size_encoded_slice
    );


    hash = keccak_proof(data_key, hash);


    hash = hash.update(
        data_size_encoded_slice
    );

    hash = tuple_push_refs(data_cell, hash);
    int hash_res = hash.digest_keccak();


        cell log_body = begin_cell()
            .store_uint(hash_res, 256)
            .store_uint(wanted_hash, 256)
            .store_ref(
                begin_cell()
                .store_slice(proof_size_encoded_slice)
                .end_cell()
            )
            .store_ref(
                data_key
            )
            .store_ref(
                data_cell
            )
        .end_cell();

        emit_log_simple(log::wrap, log_body, 0);

    return hash_res == wanted_hash;
}

(int) compare_hash(cell proof, int wanted_hash) impure {
    int proof_size = keccak_proof_size(proof, 0);
    int proof_size_encoded = encode_length(proof_size, 192);
    slice proof_size_encoded_slice = begin_cell()
        .store_uint(proof_size_encoded, number_length(proof_size_encoded) * 8)
        .end_cell()
        .begin_parse();


    tuple hash = init_hash();
    hash = hash.update(
        proof_size_encoded_slice
    );
    hash = keccak_proof(proof, hash);
    int hash_res = hash.digest_keccak();

    return hash_res == wanted_hash;
}

(int) get_child_hash(cell proof, int depth) impure {
    slice cs = proof.begin_parse();
    if (depth == 0) {
        return cs~load_uint(256);
    }
    return get_child_hash(cs~load_ref(), depth - 1);
}

() check_proof(cell proof, int wantedHash, int key, cell receipt) impure {
    slice proofs_slice = proof.begin_parse();
    int proof_type = proofs_slice~load_uint(32);
    proof = proofs_slice~load_ref();

    if (proof_type == data:node_leaf) {
        if (compare_leaf_hash(proof, wantedHash) == 0) {
            throw(999);
        }
    } elseif (compare_hash(proof, wantedHash) == 0) {
        throw(999);
    }

    slice proof_slice = proof.begin_parse();
    ;; cell proof_content_ref = proof_slice~load_ref();
    ;; int depth = proof_content_ref.cell_depth();
    if (proof_type == data:node_branch) {
        if(key == 0) {
            if (proof_slice.slice_refs_empty?() == 0) {
                throw(0xfffa);
            }
            return ();
        }

        int child_hash = get_child_hash(proof, key & 7);
        key = key >> 4;

        ;; if (childHash.length === 2) {
        ;;   const embeddedNode = new Node(childHash as any as Buffer[])
        ;;   if (i !== proof.length - 1)
        ;;     throw new Error(errorPrefix + 'Additional nodes at end of proof (embeddedNode)')

        ;;   if (matchingNibbleLength(embeddedNode.key, key) !== embeddedNode.key.length)
        ;;     throw new Error(errorPrefix + 'Key length does not match with the proof one (embeddedNode)')

        ;;   key.splice(0, embeddedNode.key.length)
        ;;   if (key.length !== 0)
        ;;     throw new Error(errorPrefix + 'Key does not match with the proof one (embeddedNode)')

        ;;   // all is fine we return the value
        ;;   return embeddedNode.value
        ;; }
        ;; else

        cell log_body = begin_cell()
            .store_uint(child_hash, 256)
            .store_uint(wantedHash, 256)
        .end_cell();

        emit_log_simple(log::wrap, log_body, 0);

        wantedHash = child_hash;

    }
    if (proof_type == data:node_empty) {
        throw(500);
    }
    if (proof_type == data:node_leaf) {
        int node_key = proof_slice~load_uint(proof_slice.slice_bits());
        int condition = node_key >> 4 % 2;
        node_key = condition == 1 ? node_key >> 4 : node_key >> 8;

        if (node_key != key) {
            throw(0xfffa);
        }

        while(node_key > 0) {
            key = key >> 4;
            node_key = node_key >> 4;
        }

        if (key == 0) {
            if(proofs_slice.slice_refs_empty?() != -1) {

                throw(0xfffa);
            }
            ;; rlp(receipt) != value => throw
            slice receipt_slice = receipt.begin_parse();
            int receipt_hash = (rlp_receipt(receipt_slice)).digest_keccak();

            tuple data_hash_tuple = init_hash();
            data_hash_tuple = tuple_push_refs(proof_slice~load_ref(), data_hash_tuple);
            int data_hash = data_hash_tuple.digest_keccak();

            if(receipt_hash != data_hash) {
                throw(0xfffa);
            }

            if (receipt_slice.slice_refs_empty?() != 0) {
                throw(0xfffa);
            }
            return ();
        } else {
            cell value_cell = proof_slice~load_ref();
            slice value_cs = value_cell.begin_parse();
            wantedHash = value_cs~load_uint(256);
        }
    }

     cell log_body = begin_cell()
            .store_uint(proof_type, 32)
            .store_ref(proof)
    .end_cell();

    emit_log_simple(log::wrap, log_body, 0);

    ;;     cell log_body = begin_cell()
    ;;         .store_uint(proof_slice.slice_refs_empty?(), 256)
    ;;         ;; .store_uint(wantedHash, 256)
    ;;         ;; .store_uint(key, 256)
    ;;         ;; .store_ref(proof)
    ;;         .store_ref(begin_cell().store_slice(proof_slice).end_cell())
    ;;     .end_cell();

    ;;     emit_log_simple(log::wrap, log_body, 0);

    if(proofs_slice.slice_refs_empty?() == 0) {
        return check_proof(proofs_slice~load_ref(), wantedHash, key, receipt);
    }

    ;; if we expected this to be null and there is not further node since wantedHash is empty or we had a extension as last element, than it is ok not to find leafs
    ;;   if (expectedValue === null && (lastNode === null || lastNode.type === 'extension' || wantedHash.length === 0))
    ;;     return null

    ;; we reached the end of the proof, but not of the path
    throw(0xfffa);
}

() verify_merkle_proof(slice in_msg_body) impure {
    cell receipt = in_msg_body~load_ref();
    cell root_hash = in_msg_body~load_ref();
    cell path_cell = in_msg_body~load_ref();
    cell proof = in_msg_body~load_ref();

    slice path_slice = path_cell.begin_parse();
    int key = path_slice~load_uint(path_slice.slice_bits());

    slice cs = root_hash.begin_parse();
    int wantedHash = cs~load_uint(256);



    ;; cell log_body = begin_cell()
    ;;         .store_ref(proof)
    ;;     .end_cell();

    ;;     emit_log_simple(log::wrap, log_body, 0);
    check_proof(proof, wantedHash, key, receipt);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::calc_hash) {
        cell receipt = in_msg_body~load_ref();
        slice receipt_slice = receipt.begin_parse();
        tuple hash_tuple = rlp_receipt(receipt_slice);

        cell log_body = begin_cell()
            .store_uint(hash_tuple.digest_keccak(), 256)
            .end_cell();

        emit_log_simple(log::wrap, log_body, 0);
        return ();
    }

    if (op == op::verify_proof) {
        verify_merkle_proof(in_msg_body);
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}
