#include "imports/stdlib.fc";
#include "utils/messages.fc";
#include "static/logs.fc";
#include "utils/rlp_verify.fc";

const op::calc_hash = "op::calc_hash"c; ;; create an opcode from string using the "c" prefix, this results in 0x46cf6aeb opcode in this case
const op::verify_proof = "op::verify_proof"c; ;; create an opcode from string using the "c" prefix, this results in 5e742370 opcode in this case

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::calc_hash) {
        cell receipt = in_msg_body~load_ref();
        slice receipt_slice = receipt.begin_parse();
        tuple hash_tuple = rlp_receipt(receipt_slice);

        cell log_body = begin_cell()
            .store_uint(hash_tuple.digest_keccak(), 256)
            .end_cell();

        emit_log_simple(log::wrap, log_body, 0);
        return ();
    }

    if (op == op::verify_proof) {
        cell receipt = in_msg_body~load_ref();
        cell root_hash = in_msg_body~load_ref();
        cell path_cell = in_msg_body~load_ref();
        cell proof = in_msg_body~load_ref();
        verify_merkle_proof(receipt, root_hash, path_cell, proof);
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}
