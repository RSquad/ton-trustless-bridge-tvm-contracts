#include "imports/stdlib.fc";
#include "utils/messages.fc";
#include "static/logs.fc";

tuple init_hash () asm "NIL";
tuple update(tuple t, slice s) asm "TPUSH";
int digest_keccak(tuple t) asm " DUP TLEN EXPLODEVAR HASHEXT_KECCAK256";
int HASHEXT_KECCAK(slice) asm " 1 PUSHINT HASHEXT_KECCAK256";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    cell receipt = in_msg_body~load_ref();
    slice receipt_slice = receipt.begin_parse();
    cell logs_bloom = receipt_slice~load_ref();
    slice logs_bloom1 = logs_bloom.begin_parse();


    cell logs_bloom_1 = logs_bloom1~load_ref();
    slice logs_bloom2 = logs_bloom_1.begin_parse();

    cell logs_bloom_2 = logs_bloom2~load_ref();
    slice logs_bloom3 = logs_bloom_2.begin_parse();

    ;; slice first_bug =

    ;; slice tmp_slice = receipt.begin_parse();
    ;; slice some_cell = tmp_slice~load_ref().begin_parse();
    ;; slice p1 = some_cell~load_ref().begin_parse();
    ;; slice p2 = p1~load_ref().begin_parse();

    ;; cell wtf = begin_cell().store_uint(12345, 16).end_cell();
    ;; slice wwtf = wtf.begin_parse();
    ;; var res = init_hash().update(some_cell).update(p1).update(p2);
    ;; res = init_hash().update(wwtf);
    ;; cell tmp_cell = tmp_slice~load_ref();
    ;; tmp_slice = tmp_cell.begin_parse();
    ;; res = res.update(tmp_slice);

    int hash = init_hash()
    .update(receipt_slice)
    .update(logs_bloom1)
    .update(logs_bloom2)
    .update(logs_bloom3)
    .digest_keccak();
    ;; int hash = res.digest_keccak();
    ;; .digest_keccak();
    ;; int hash = HASHEXT_KECCAK(wwtf);


    cell log_body = begin_cell()
        .store_uint(hash, 256)
        ;; .store_ref(receipt)
    ;; .store_slice(wwtf)
    ;; .store_ref(begin_cell().store_slice(some_cell).end_cell())
    ;; .store_ref(begin_cell().store_slice(p1).end_cell())
    ;; .store_ref(begin_cell().store_slice(p2).end_cell())

        .end_cell();

    emit_log_simple(log::wrap, log_body, 0);

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}
