#include "imports/stdlib.fc";
#include "utils/messages.fc";
#include "static/logs.fc";
#include "ssz/ssz_utils.fc";

;; BLS_AGGREGATE
;; (slice) bls_aggregate(tuple data) asm "DUP TLEN EXPLODEVAR BLS_AGGREGATE";
(slice) bls_aggregate(slice, slice) asm "BLS_G1_ADD";
(int) bls_verify(slice pub, slice msg, slice sig) asm "BLS_VERIFY";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case
const op::init_committee = "op::init_committee"c;
const op::update_committee = "op::update_committee"c;

const domain = 0x0700000047eb72b3be36f08feffcaba760f0a2ed78c1a85f0654941a0d19d0fa;

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global cell pubkeys_dict;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    cell pubs_cell = ds~load_ref();
    slice pubs_slice = pubs_cell.begin_parse();
    pubkeys_dict = pubs_slice~load_dict();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_ref(
            begin_cell()
                .store_dict(pubkeys_dict)
                .end_cell()
        )
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ;; ctx_counter += increase_by;
        save_data();
        return ();
    }

    if (op == op::init_committee) {
        cell data = in_msg_body~load_ref();
        slice data_slice = data.begin_parse();
        cell committee_cell = data_slice~load_ref();
        slice committee_slice = committee_cell.begin_parse();
        pubkeys_dict = committee_slice~load_dict();
        save_data();



        return ();
    }

    if (op == op::update_committee) {
        cell data = in_msg_body~load_ref();
        slice data_slice = data.begin_parse();
        cell committee_cell = data_slice~load_ref();
        slice committee_slice = committee_cell.begin_parse();
        pubkeys_dict = committee_slice~load_dict();
        cell aggregate_cell = in_msg_body~load_ref();
        slice aggregate_slice = aggregate_cell.begin_parse();
        slice beacon_ssz = (in_msg_body~load_ref()).begin_parse();
        slice msg = (in_msg_body~load_ref()).begin_parse();

        save_data();

        slice aggr_pubkey = begin_cell().end_cell().begin_parse();

        (int key, slice val, int flag) = pubkeys_dict.udict_get_min?(32);
        ;; cell log_body = begin_cell()
        ;;         .store_uint(aggregate_slice.preload_uint(8), 32)
        ;;         ;; .store_slice(aggr_pubkey)
        ;;         ;; .store_ref(val)
        ;;         .end_cell();

        ;;         emit_log_simple(log::wrap, log_body, 0);
        while (flag) {
            ;; do something with pair key->val
            if (aggregate_slice~load_uint(1)) {
                if (aggr_pubkey.slice_empty?()) {
                    aggr_pubkey = val;
                } else {
                    aggr_pubkey = bls_aggregate(aggr_pubkey, val);
                }
                ;; cell log_body = begin_cell()
                ;; .store_uint(key, 32)
                ;; ;; .store_slice(aggr_pubkey)
                ;; ;; .store_ref(val)
                ;; .end_cell();

                ;; emit_log_simple(log::wrap, log_body, 0);
            }

            (key, val, flag) = pubkeys_dict.udict_get_next?(32, key);
        }

        slice sig = (aggregate_slice~load_ref()).begin_parse();


        (slice a, slice ssz_beacon_hash) = beacon_ssz.hashTreeRoot();

        tuple chunks = empty_tuple();
        chunks = cons(ssz_beacon_hash~load_uint(32 * 8), chunks);
        chunks = cons(domain, chunks);

        int signature_hash = merkleize(chunks, 2, 2);

        int is_signed = bls_verify(aggr_pubkey, begin_cell().store_uint(signature_hash, 32 * 8).end_cell().begin_parse(), sig);

        cell log_body = begin_cell()
        ;; .store_uint(is_signed & 0xF, 8 * 8)
        .store_uint(is_signed & 0xF, 32 * 8)
        ;; .store_slice(beacon_ssz)
        ;; .store_ref(val)
        .end_cell();

        emit_log_simple(log::wrap, log_body, 0);

        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

;; int get_counter() method_id {
;;     load_data();
;;     return ctx_counter;
;; }

;; int get_id() method_id {
;;     load_data();
;;     return ctx_id;
;; }
