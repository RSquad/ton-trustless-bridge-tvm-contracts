#include "static/logs.fc";
#include "utils/messages.fc";
#include "../jetton/op-codes.fc";

int gas_consumption() asm "15000000 PUSHINT"; ;; 0.015 TON

(slice) generate_account_address (int workchain_id, int addr) {
  ;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256  = MsgAddressInt;

  return begin_cell()
        .store_uint(2, 2) ;; addr_std$10
        .store_uint(0, 1) ;; anycast nothing
        .store_int(workchain_id, 8) ;; workchain_id: -1
        .store_uint(addr, 256) ;; .store_uint(cell_hash(state_init), 256)
    .end_cell().begin_parse();
}

(slice) none_addr () {
  ;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256  = MsgAddressInt;

  return begin_cell()
        .store_uint(0, 2) ;; addr_std$10
    .end_cell().begin_parse();
}

(int) load_data() inline_ref {
  slice data = get_data().begin_parse();
  return (
    data~load_uint(8));
}

() save_data(int version) impure inline_ref {
  set_data(begin_cell()
    .store_uint(version, 8)
    .end_cell());
}

() parse_receipt(cell receipt) impure {

  ;; var cs = receipt.begin_parse();

  ;; go to logs
  ;; logs bloom
  ;; cs~load_ref();



  ;; cell log_cell = cs~load_ref();
  ;; slice log_slice = log_cell.begin_parse();

  ;; while(log_slice.slice_refs_empty?()!= -1) {
  ;;   slice addr = log_slice~load_msg_addr();
  ;;   ;; topics
  ;;   cell topics_cell = log_slice~load_ref();
  ;;   slice topics_slice = topics_cell.begin_parse();
  ;;   ;; data
  ;;   cell data_cell = log_slice~load_ref();

  ;;   int topic_id = topics_slice~load_uint(256);
  ;;   if(topic_id == 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) {
  ;;     slice data_slice = data_cell.begin_parse();
  ;;     int num = data_slice~load_uint(256);
  ;;     cell log_body = begin_cell()
  ;;     ;; .store_uint(3, 2)
  ;;     .store_uint(num, 256)
  ;;     .store_uint(topic_id, 256)
  ;;     .end_cell();
  ;; emit_log_simple(log::wrap, log_body, 0);
  ;;   }

  ;;   log_cell = log_slice~load_ref();
  ;;   log_slice = log_cell.begin_parse();
  ;; }

}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg_body) impure {
  var cs = in_msg_cell.begin_parse();

  if(in_msg_body.slice_empty?()) {
    return ();
  };

  int ton_addr = in_msg_body~load_uint(256);
  slice addr = generate_account_address(0, ton_addr);
  int amount = in_msg_body~load_uint(256);

  cell log_body = begin_cell()
      .store_slice(addr)
      .end_cell();

  ;; emit_log_simple(log::wrap, log_body, 0);

  cell mint = begin_cell()
        .store_uint(21, 32)
        .store_uint(0, 64)
        .store_slice(addr)
        .store_coins(2 * gas_consumption())
        .store_ref(
    begin_cell()
            .store_uint(0x178d4519, 32)
            .store_uint(0, 64)
            .store_coins(amount)
    ;; TODO: use null addr
            .store_slice(none_addr())
            .store_slice(none_addr())
            .store_coins(gas_consumption())
            .store_uint(0, 1)
          .end_cell()
  )
  .end_cell();

  slice fu = in_msg_body~load_msg_addr();

  ;; send_raw_message(begin_cell()
  ;; .store_uint(0x18, 6)
  ;; .store_slice(in_msg_body~load_msg_addr())
  ;; .store_coins(4 * gas_consumption())
  ;; .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
  ;; .store_slice(mint.begin_parse())
  ;; .end_cell() , 64);

  cell receipt = in_msg_body~load_ref();
  ;; cell fff = begin_cell().store_ref(receipt).end_cell();

  ;; throw(122);
  ;; parse_receipt(receipt);

  var cs2 = receipt.begin_parse();


  ;; cs2~load_uint(256);
  ;; cs2~load_uint(256);
  ;; ;; go to logs
  ;; ;; logs bloom
  ;; cs2~load_ref();



  ;; cell log_cell = cs2~load_ref();
  ;; slice log_slice = log_cell.begin_parse();

  ;; slice addr2 = log_slice~load_msg_addr();
  ;; cell topics_cell = log_slice~load_ref();
  ;; slice topics_slice = topics_cell.begin_parse();
  ;; ;; data
  ;; cell data_cell = log_slice~load_ref();

  ;; int topic_id = topics_slice~load_uint(256);

  ;; slice data_slice = data_cell.begin_parse();
  ;; int num = data_slice~load_uint(256);
  cell log_body2 = begin_cell()
  ;; .store_slice(fu)
  ;; .store_uint(cs2.slice_refs_empty?(), 256)
  .store_slice(in_msg_body)
  ;; .store_uint(num, 256)
  ;; .store_uint(topic_id, 256)
        .end_cell();

  emit_log_simple(log::wrap, log_body2, 0);
  ;; emit_log_simple(log::wrap, log_body, 0);



  ;; while(log_slice.slice_refs_empty?()!= -1) {
  ;;   slice addr = log_slice~load_msg_addr();
  ;;   topics
  ;;   cell topics_cell = log_slice~load_ref();
  ;;   slice topics_slice = topics_cell.begin_parse();
  ;;   ;; data
  ;;   cell data_cell = log_slice~load_ref();

  ;;   int topic_id = topics_slice~load_uint(256);
  ;;   if(topic_id == 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) {
  ;;     slice data_slice = data_cell.begin_parse();
  ;;     int num = data_slice~load_uint(256);
  ;;     cell log_body = begin_cell()
  ;;     ;; .store_uint(3, 2)
  ;;     .store_uint(num, 256)
  ;;     .store_uint(topic_id, 256)
  ;;     .end_cell();
  ;;     emit_log_simple(log::wrap, log_body, 0);
  ;;   }

  ;;   log_cell = log_slice~load_ref();
  ;;   log_slice = log_cell.begin_parse();
  ;; }
}
